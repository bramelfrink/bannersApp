service: Banners

provider:
  name: aws
  runtime: python3.8
  stage: ${opt:stage, 'dev'}
  region: eu-central-1
  stackName: ${self:service}
  logRetentionInDays: 14
  iamRoleStatements:
    - Effect: Allow
      # I'm a bit liberal with the permissions for now, promise that I won't do that on actual projects :)
      Action:
        - 's3:*'
      Resource:
        - !GetAtt ClickstreamBucket.Arn
        - Fn::Join: ['/', [!GetAtt ClickstreamBucket.Arn, '*']]
    - Effect: Allow
      Action:
        - 'dynamodb:*'
      Resource:
        - !GetAtt DynamoDBClicks.Arn
        - !GetAtt DynamoDBConversions.Arn

layers:
  Pandas:
    path: layers/pandas
    name: ${self:service}-pandas
    description: layer with Pandas to reduce package size and speed up deployment
    compatibleRuntimes:
      - python3.8
    allowedAccounts:
      - '*'

package:
  individually: true

plugins:
  - serverless-step-functions
  - serverless-python-requirements

functions:
  trigger:
    handler: functions/trigger/src/handler.lambda_handler
    name: ${self:service}-trigger
    memorySize: 128
    package:
      exclude:
        - ./**
      include:
        - functions/trigger/src/**
    environment:
      stateMachineArn: arn:aws:states:{{ aws_region }}:{{ aws_caller_facts.account }}:stateMachine:Banners
    events:
      - s3:
        bucket: ClickstreamBucket
        events:
          - s3:ObjectCreated:Put
        rules:
          - prefix: in/

  deduplicate_clicks:
    handler: functions/deduplicate/src/handler.click_lambda_handler
    name: ${self:service}-deduplicate-clicks
    layers:
      - !Ref PandasLambdaLayer
    package:
      exclude:
        - ./**
      include:
        - functions/deduplicate/**
        - helpers/s3.py
    environment:
      tableName: !Ref DynamoDBClicks

  deduplicate_conversions:
    handler: functions/deduplicate/src/handler.conversion_lambda_handler
    name: ${self:service}-deduplicate-conversions
    layers:
      - !Ref PandasLambdaLayer
    package:
      exclude:
        - ./**
      include:
        - functions/deduplicate/**
        - helpers/s3.py
    environment:
      tableName: !Ref DynamoDBConversions

  aggregate:
    handler: functions/aggregate/src/handler.lambda_handler
    name: ${self:service}-aggregate
    package:
      exclude:
        - ./**
      include:
        - functions/aggregate/**
        - helpers/s3.py

stepFunctions:
  stateMachines:
    BannersClickStream-clicks:
      name: BannersClickStream-clicks
      definition:
        StartAt: Deduplication
        States:
          Deduplication:
            Type: Task
            Resource: !GetAtt deduplicate_clicks.Arn
            Next: Aggregation
          Aggregation:
            Type: Task
            Resource: !GetAtt aggregate.Arn
            End: true

    BannersClickStream-conversions:
      name: BannersClickStream-clicks
      definition:
        StartAt: Deduplication
        States:
          Deduplication:
            Type: Task
            Resource: !GetAtt deduplicate_conversions.Arn
            Next: Aggregation
          Aggregation:
            Type: Task
            Resource: !GetAtt aggregate.Arn
            End: true

    BannersClickStream-impressions:
      # Assume that impressions are unique
      name: BannersClickStream-impressions
      definition:
        StartAt: Aggregation
        States:
          Aggregation:
            Type: Task
            Resource: !GetAtt aggregate.Arn
            End: true

resources:
  Resources:
    ClickstreamBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketEncryption:
          ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: AES256

    DynamoDBClicks:
      Type: AWS::DynamoDB::Table
      Properties:
        # only define the attributes that DynamoDB needs to know about to build the KeySchema
        AttributeDefinitions:
          - AttributeName: click_id
            AttributeType: N
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: click_id
            KeyType: HASH

    DynamoDBConversions:
      Type: AWS::DynamoDB::Table
      Properties:
        # only define the attributes that DynamoDB needs to know about to build the KeySchema
        AttributeDefinitions:
          - AttributeName: click_id
            AttributeType: N
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: click_id
            KeyType: HASH
