service: Banners

provider:
  name: aws
  runtime: python3.8
  stage: ${opt:stage, 'dev'}
  region: eu-central-1
  stackName: ${self:service}
  logRetentionInDays: 14
  iamRoleStatements:
    - Effect: Allow
      # I'm a bit liberal with the permissions for now, promise that I won't do that on actual projects :)
      Action:
        - 's3:*'
      Resource:
        - !GetAtt ClickstreamBucket.Arn
        - Fn::Join: ['/', [!GetAtt ClickstreamBucket.Arn, '*']]
    - Effect: Allow
      Action:
        - 'dynamodb:*'
      Resource:
        - '*'
    - Effect: Allow
      Action:
        - 'states:StartExecution'
      Resource:
        - '*'
    - Effect: Allow
      Action:
        - 'secretsmanager:GetSecretValue'
      Resource:
        - '*'

layers:
  Pandas:
    path: layers/pandas
    name: ${self:service}-pandas
    description: layer with Pandas to reduce package size and speed up deployment
    compatibleRuntimes:
      - python3.8
    allowedAccounts:
      - '*'

package:
  individually: true

plugins:
  - serverless-step-functions
  - serverless-python-requirements

functions:
  trigger:
    handler: functions/trigger/src/handler.lambda_handler
    name: ${self:service}-trigger
    memorySize: 128
    package:
      exclude:
        - ./**
      include:
        - functions/trigger/src/**
    events:
      - s3:
        bucket: ClickstreamBucket
        events:
          - s3:ObjectCreated:Put
        rules:
          - prefix: in/

  deduplicate_clicks:
    handler: functions/deduplicate/src/handler.click_lambda_handler
    name: ${self:service}-deduplicate-clicks
    memorySize: 320
    timeout: 300
    layers:
      - !Ref PandasLambdaLayer
    package:
      exclude:
        - ./**
      include:
        - functions/deduplicate/**
        - helpers/s3.py
#    environment:
#      tableName: !Ref DynamoDBClicks

  deduplicate_conversions:
    handler: functions/deduplicate/src/handler.conversion_lambda_handler
    name: ${self:service}-deduplicate-conversions
    memorySize: 320
    timeout: 300
    layers:
      - !Ref PandasLambdaLayer
    package:
      exclude:
        - ./**
      include:
        - functions/deduplicate/**
        - helpers/s3.py
#    environment:
#      tableName: !Ref DynamoDBConversions

  store_clicks:
    handler: functions/store/src/handler.clicks_lambda_handler
    name: ${self:service}-store-clicks
    memorySize: 320
    timeout: 300
    layers:
      - !Ref PandasLambdaLayer
    package:
      exclude:
        - ./**
      include:
        - functions/store/**
        - helpers/s3.py

  store_conversions:
    handler: functions/store/src/handler.conversions_lambda_handler
    name: ${self:service}-store-conversions
    memorySize: 320
    timeout: 300
    layers:
      - !Ref PandasLambdaLayer
    package:
      exclude:
        - ./**
      include:
        - functions/store/**
        - helpers/s3.py

  store_impressions:
    handler: functions/store/src/handler.impressions_lambda_handler
    name: ${self:service}-store-impressions
    memorySize: 320
    timeout: 300
    layers:
      - !Ref PandasLambdaLayer
    package:
      exclude:
        - ./**
      include:
        - functions/store/**
        - helpers/s3.py

stepFunctions:
  stateMachines:
    BannersClickStream-clicks:
      name: BannersClickStream-clicks
      definition:
        StartAt: Deduplication
        States:
          Deduplication:
            Type: Task
            Resource: !GetAtt deduplicate_clicks.Arn
            Next: Store
          Store:
            Type: Task
            Resource: !GetAtt store_clicks.Arn
            End: true

    BannersClickStream-conversions:
      name: BannersClickStream-conversions
      definition:
        StartAt: Deduplication
        States:
          Deduplication:
            Type: Task
            Resource: !GetAtt deduplicate_conversions.Arn
            Next: Store
          Store:
            Type: Task
            Resource: !GetAtt store_conversions.Arn # change to conversion
            End: true

    BannersClickStream-impressions:
      # Assume that impressions are unique
      name: BannersClickStream-impressions
      definition:
        StartAt: Store
        States:
          Store:
            Type: Task
            Resource: !GetAtt store_impressions.Arn
            End: true

resources:
  Resources:
    ClickstreamBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketEncryption:
          ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: AES256

# Commented these out because I tried deleting one table to quickly empty it out.
# Redeploying did not recreate the table however. Not wanting to spend too much time to investigate why.
#    DynamoDBClicks:
#      Type: AWS::DynamoDB::Table
#      Properties:
#        # only define the attributes that DynamoDB needs to know about to build the KeySchema
#        AttributeDefinitions:
#          - AttributeName: click_id
#            AttributeType: N
#        BillingMode: PAY_PER_REQUEST
#        KeySchema:
#          - AttributeName: click_id
#            KeyType: HASH
#
#    DynamoDBConversions:
#      Type: AWS::DynamoDB::Table
#      Properties:
#        # only define the attributes that DynamoDB needs to know about to build the KeySchema
#        AttributeDefinitions:
#          - AttributeName: click_id
#            AttributeType: N
#        BillingMode: PAY_PER_REQUEST
#        KeySchema:
#          - AttributeName: click_id
#            KeyType: HASH
